package main

import (
	"context"
	"fmt"
	"time"

	"github.com/whgentry/gomidi-led/leds"
	"gitlab.com/gomidi/midi/v2"
	_ "gitlab.com/gomidi/midi/v2/drivers/rtmididrv" // autoregisters driver
)

type KeyInfo struct {
	Note     string
	Velocity int
}

const MidiKeyboardOffset = 21
const KeyboardKeyCount = 88

var ledGrid leds.LEDGridInterface
var keyboardKeys []KeyInfo

func MidiToKeyboardIndex(key uint8) int {
	if int(key) < MidiKeyboardOffset {
		return -1
	}
	return int(key) - MidiKeyboardOffset
}

func UpdateFrame(ctx context.Context, refreshRate int) {
	frameDurationMs := 1000 / refreshRate
	ticker := time.NewTicker(time.Duration(frameDurationMs) * time.Millisecond)
	for {
		select {
		case <-ticker.C:
			for i, keyInfo := range keyboardKeys {
				if keyInfo.Velocity > 0 {
					ledGrid.SetLED(0, i, leds.White)
				} else {
					ledGrid.SetLED(0, i, leds.Off)
				}
			}
			ledGrid.UpdateLEDs()
		case <-ctx.Done():
			return
		}
	}

}

func main() {
	defer midi.CloseDriver()

	ledGrid = leds.NewVirtualLEDGrid(1, KeyboardKeyCount)
	keyboardKeys = make([]KeyInfo, KeyboardKeyCount)

	ctx, cancel := context.WithCancel(context.Background())

	in, err := midi.InPort(0)
	if err != nil {
		fmt.Print(err.Error())
		return
	}

	fmt.Print("MIDI Device Connected")

	stop, err := midi.ListenTo(in, func(msg midi.Message, timestampms int32) {
		var bt []byte
		var ch, key, vel uint8
		switch {
		case msg.GetSysEx(&bt):
			fmt.Printf("got sysex: % X\n", bt)
		case msg.GetNoteStart(&ch, &key, &vel):
			keyboardKeys[MidiToKeyboardIndex(key)].Velocity = int(vel)
		case msg.GetNoteEnd(&ch, &key):
			keyboardKeys[MidiToKeyboardIndex(key)].Velocity = 0
		default:
			// ignore
		}
	}, midi.UseSysEx())

	if err != nil {
		fmt.Printf("ERROR: %s\n", err)
		return
	}

	go ledGrid.AnimateVirtualGrid(20)
	go UpdateFrame(ctx, 20)

	// Wait for escape to close
	termbox.SetInputMode(termbox.InputEsc)
	for {
		switch ev := termbox.PollEvent(); ev.Type {
		case termbox.EventKey:
			if ev.Key == termbox.KeyEsc || ev.Key == termbox.KeyCtrlC {
				cancel()
				ledGrid.StopVirtualGrid()
				stop()
				os.Exit(0)
			}
		}
	}
}
